# -*- coding: utf-8 -*-
"""
Django settings for natrix project.

Generated by 'django-admin startproject' using Django 1.10.5.

For more information on this file, see
https://docs.djangoproject.com/en/1.10/topics/settings/

For the full list of settings and their values, see
https://docs.djangoproject.com/en/1.10/ref/settings/
"""

import os
import ldap
from django_auth_ldap.config import LDAPSearch
# Build paths inside the project like this: os.path.join(BASE_DIR, ...)
BASE_DIR = os.path.dirname(os.path.dirname(os.path.abspath(__file__)))

# SECURITY WARNING: keep the secret key used in production secret!
SECRET_KEY = 'u-xst-sh*7iy@3h9j%l&j_kav$vaahur$nitf!d($o@-+wq80g'

# SECURITY WARNING: don't run with debug turned on in production!
DEBUG = True

ALLOWED_HOSTS = ['*']

# Application definition
INSTALLED_APPS = [
    'corsheaders',
    'django.contrib.admin',
    'django.contrib.auth',
    'django.contrib.contenttypes',
    'django.contrib.sessions',
    'django.contrib.messages',
    'django.contrib.staticfiles',
    'auditlog',
    'rest_framework',
    'django_celery_beat',
    'django_celery_results',
    'rbac',
    'benchmark',
    'terminal',
    'infrastructure',
    'sentinel',
    'nconfig',
]

MIDDLEWARE = [
    'django.middleware.security.SecurityMiddleware',
    'django.contrib.sessions.middleware.SessionMiddleware',
    'corsheaders.middleware.CorsMiddleware',
    'django.middleware.common.CommonMiddleware',
    'django.middleware.csrf.CsrfViewMiddleware',
    'django.middleware.locale.LocaleMiddleware',
    'django.contrib.auth.middleware.AuthenticationMiddleware',
    'django.contrib.messages.middleware.MessageMiddleware',
    'django.middleware.clickjacking.XFrameOptionsMiddleware',
    'auditlog.middleware.AuditlogMiddleware',
    'rbac.middleware.RBACMiddleware',
]

CORS_ALLOW_CREDENTIALS = True
CORS_ORIGIN_ALLOW_ALL = True


ROOT_URLCONF = 'natrix.urls'

TEMPLATES = [
    {
        'BACKEND': 'django.template.backends.django.DjangoTemplates',
        'DIRS': ['dashboard/dist'],
        'APP_DIRS': True,
        'OPTIONS': {
            'context_processors': [
                'django.template.context_processors.debug',
                'django.template.context_processors.request',
                'django.contrib.auth.context_processors.auth',
                'rbac.context_processors.rbac',
                'django.contrib.messages.context_processors.messages',
            ],
        },
    },
]

WSGI_APPLICATION = 'natrix.wsgi.application'

# user can reset DEFAULT_CACHE_URL, set yourself redis server address
DEFAULT_CACHE_URL = 'redis://localhost:6379'
CACHES = {
    'default': {
        'BACKEND': 'django_redis.cache.RedisCache',
        'LOCATION': DEFAULT_CACHE_URL,
        'OPTIONS': {
            'CLIENT_CLASS': 'django_redis.client.DefaultClient'
        }
    }
}

SESSION_SAVE_EVERY_REQUEST = True
SESSION_COOKIE_AGE = 60 * 60
SESSION_EXPIRE_AT_BROWSER_CLOSE = True

# Database
# https://docs.djangoproject.com/en/1.10/ref/settings/#databases
# DATABASES = {
#     'default': {
#         'ENGINE': 'django.db.backends.sqlite3',
#         'NAME': os.path.join(BASE_DIR, 'natrix.sqlite3'),
#     }
# }
DATABASES = {
     'default': {
        'ENGINE': 'django.db.backends.mysql',
        'NAME': 'natrix',
        'USER': 'root',
        'PASSWORD': 'mysql_password',
        'HOST': '127.0.0.1',
        'PORT': '3306',
     }
}


# AUTH Backends
AUTHENTICATION_BACKENDS = (
    'rbac.backends.auths.NatrixLDAPBackend',
    'django.contrib.auth.backends.ModelBackend',
)

# Password validation
# https://docs.djangoproject.com/en/1.10/ref/settings/#auth-password-validators
AUTH_PASSWORD_VALIDATORS = [
    {
        'NAME': 'django.contrib.auth.password_validation.UserAttributeSimilarityValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.MinimumLengthValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.CommonPasswordValidator',
    },
    {
        'NAME': 'django.contrib.auth.password_validation.NumericPasswordValidator',
    },
]

# Internationalization
# https://docs.djangoproject.com/en/1.10/topics/i18n/
LANGUAGE_CODE = 'en-us'
TIME_ZONE = 'Asia/Shanghai'
USE_I18N = True
USE_L10N = True
USE_TZ = TrueLOCALE_PATHS = (
    os.path.join(BASE_DIR, 'locale'),
)

# Static files (CSS, JavaScript, Images)
# https://docs.djangoproject.com/en/1.10/howto/static-files/
STATIC_URL = '/natrix/static/'
STATIC_ROOT = os.path.join(BASE_DIR, 'dashboard/dist')
STATICFILES_DIRS = [
    os.path.join(BASE_DIR, "dashboard/dist/static"),
]

LOGIN_URL = '/natrix/accounts/login'
LOGIN_REDIRECT_URL = '/'
LOGOUT_REDIRECT_URL = '/natrix/accounts/login'

PAGE_NUM = 10

# email configuration
EMAIL_BACKEND = 'django.core.mail.backends.smtp.EmailBackend'
EMAIL_USE_TLS = False
EMAIL_HOST = 'smtp.163.com'
EMAIL_PORT = 25
EMAIL_HOST_USER = 'natrixgroup@163.com'
DEFAULT_FROM_EMAIL = 'natrixgroup@163.com'
EMAIL_HOST_PASSWORD = 'natrixrobot666'

# SMS configuration
SMS_URL = ''
SMS_ORGNO = ''
SMS_TYPENO = ''

# ------------ administration configuration ------------------
# Administration information
ADMIN_USERNAME = 'admin'
ADMIN_PASSWORD = 'admin12345'
ADMIN_EMAIL = ''
ADMIN_GROUP = 'admin_group'

# ------------LDAP config
# AUTH_LDAP_SERVER_URI = ''
# AUTH_LDAP_BIND_DN = ''
# AUTH_LDAP_BIND_PASSWORD = ''
# AUTH_LDAP_USER_SEARCH = LDAPSearch()


# -------------- celery setting -----------
CELERY_RESULT_BACKEND = 'django-db'


#
DEEPMONITOR_URL = 'http://127.0.0.1:8005'


# ------------ benchmark setting ---------
BENCHMARK_STORE_TYPE = 'eventhub'
BENCHMARK_STORE_URL = 'http://127.0.0.1:8090'


# ------------- ElasticSearch setting-----------



# -------------log setting--------------
LOG_DIR = '/var/log/natrix'
LOG_LEVEL = 'INFO'

if not DEBUG:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '[%(asctime)s] %(levelname)s %(module)s %(process)d %(thread)d '
                          '[%(name)s:%(funcName)s:%(lineno)s] %(message)s',
                'datefmt': "%Y/%b/%d %H:%M:%S"
            },
            'simple': {
                'format': '[%(asctime)s] %(levelname)s [%(name)s:%(funcName)s:%(lineno)s] %(message)s',
                'datefmt': "%Y/%b/%d %H:%M:%S"
            },
        },
        'handlers': {
            'dfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'commonfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_common.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'rbacfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_rbac.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'crontabfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_crontab.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'benchfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_benchmark.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'celerydfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_celeryd.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'celerybeatfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_celerybeat.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'terminalfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_terminal.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'

            },
            'natrixbootfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_natrixboot.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'celerytasksfile': {
                'level': LOG_LEVEL,
                'class': 'logging.handlers.WatchedFileHandler',
                'filename': '{}/natrix_celerytasks.log'.format(LOG_DIR),
                'encoding': 'utf8',
                'formatter': 'verbose'
            },
            'console': {
                'class': 'logging.StreamHandler',
            },
            'null': {
                'class': 'logging.NullHandler',
                'formatter': 'simple'
            },
        },
        'loggers': {
            'natrix.common': {
                'handlers': ['commonfile'],
                'level': LOG_LEVEL,
                'propagate': True,
            },
            'rbac': {
                'handlers': ['rbacfile'],
                'level': LOG_LEVEL,
                'propagate': True,
            },
            'benchmark': {
                'handlers': ['benchfile'],
                'level': LOG_LEVEL,
                'propagate': False,
            },
            'terminal': {
                'handlers': ['terminalfile'],
                'level': LOG_LEVEL,
                'propagate': False
            },
            'natrix_boot': {
                'handlers': ['natrixbootfile'],
                'level': LOG_LEVEL,
                'propagate': False
            },
            'django': {
                'handlers': ['dfile'],
                'level': "ERROR",
                'propagate': False,
            },
            'celery': {
                'handlers': ['celerytasksfile'],
                'level': "ERROR",
                'propagate': False,
            },
            'django_celery': {
                'handlers': ['celerydfile'],
                'level': "ERROR",
                'propagate': False,
            },
            'django_celery_beat': {
                'handlers': ['celerybeatfile'],
                'level': "ERROR",
                'propagate': False,
            },
        },
    }
else:
    LOGGING = {
        'version': 1,
        'disable_existing_loggers': False,
        'formatters': {
            'verbose': {
                'format': '[%(asctime)s] %(levelname)s %(module)s %(process)d %(thread)d '
                          '[%(name)s:%(funcName)s:%(lineno)s] %(message)s',
                'datefmt': "%Y/%b/%d %H:%M:%S"
            },
            'simple': {
                'format': '[%(asctime)s] %(levelname)s [%(name)s:%(funcName)s:%(lineno)s] %(message)s',
                'datefmt': "%Y/%b/%d %H:%M:%S"
            },
        },
        'handlers': {
            'console': {
                'class': 'logging.StreamHandler',
                'formatter': 'simple'
            }
        },
        'loggers': {
            '*': {
                'handlers': ['console'],
                'level': 'DEBUG',
                'propagate': False
            }

        }

    }